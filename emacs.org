#+STARTUP: indent
#+PROPERTY: header-args    :results silent

* package init
#+begin_src emacs-lisp
  (setq inhibit-startup-message t)
  (require 'package)
  (setq package-enable-at-startup nil)

  (setq package-archives '(("gnu" . "http://elpa.emacs-china.org/gnu/")
			   ("org" . "http://elpa.emacs-china.org/org/")
			   ("melpa" . "http://elpa.emacs-china.org/melpa/") ;; use-package
			   ))
  (setq package-check-signature nil)
  (package-initialize)
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (setq use-package-always-ensure t)
#+END_SRC
* python
#+BEGIN_SRC emacs-lisp
   (use-package python
     :ensure t
     :mode ("\\.py\\'" . python-mode)
     :interpreter ("python" . python-mode)
     :config
     (setq indent-tabs-mode nil)
     (setq python-indent-offset 4)
     )
   ;;
   ;; company jedi use jedi-core
   ;;
   (use-package company-jedi
     :ensure t
     :config
     (add-hook 'python-mode-hook 'jedi:setup)
     (add-hook 'python-mode-hook (lambda ()
                                   (add-to-list (make-local-variable 'company-backends)                                             'company-jedi)))
     )

  (use-package elpy
     :ensure t
     :commands (elpy-enable)
     :config
     (setq elpy-rpc-backend "jedi")
     )

  ;; 成生 TAGS
  ;; find . -type f -name '*.py' | xargs etags
#+END_SRC
* monokai
#+BEGIN_SRC emacs-lisp :results output
  (use-package monokai-theme
    :config
    (load-theme 'monokai t))
#+END_SRC
* undo tree
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :config
    (undo-tree-mode)
    :bind ("C-c t" . undo-tree-visualize))
#+END_SRC
* ace-window
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :defer 2
    :config
    (global-set-key (kbd "C-c o") 'ace-window))
#+END_SRC
* htmlize
#+BEGIN_SRC emacs-lisp
  (use-package htmlize
    :defer 2)
#+END_SRC
* iedit
#+BEGIN_SRC emacs-lisp
  (use-package iedit
    :defer 2
    :config
    (global-set-key (kbd "C-c i") 'iedit-mode))
#+END_SRC
* elscreen
#+BEGIN_SRC emacs-lisp
  (use-package elscreen
    :defer 2
    :config
    (elscreen-start)
    (elscreen-set-prefix-key "\C-t")
    (setq elscreen-display-tab nil))
#+END_SRC
* git-gutter
#+begin_src emacs-lisp
  (use-package git-gutter
    :defer 1
    :config
    (global-git-gutter-mode +1)
    (global-set-key (kbd "C-p") 'git-gutter:previous-hunk)
    (global-set-key (kbd "C-n") 'git-gutter:next-hunk)
    (custom-set-variables
     '(git-gutter:update-interval 1)
     '(git-gutter:lighter " GG")
     '(git-gutter:window-width 2)
     '(git-gutter:modified-sign "☁")
     '(git-gutter:added-sign "☀")
     '(git-gutter:deleted-sign "☂")
     '(git-gutter:disabled-modes '(asm-mode image-mode))
     '(git-gutter:separator-sign "|")
     '(git-gutter:ask-p nil)
     ))
#+end_src
* find file in project
#+begin_src emacs-lisp
  (use-package find-file-in-project
    :defer 1
    :config
    (global-set-key (kbd "C-f p") 'find-file-in-project))
#+end_src
* counsel
#+begin_src emacs-lisp
  (use-package counsel
    :defer 1
    :config
    (global-set-key (kbd "C-c a") 'counsel-ag))
#+end_src
* position register
#+begin_src emacs-lisp
  (global-set-key (kbd "C-r r") 'point-to-register)
  (global-set-key (kbd "C-r g") 'jump-to-register)
#+end_src
* org-bullets
#+begin_src emacs-lisp
  (use-package org-bullets
    :defer 1
    :config
    (add-hook 'org-mode-hook 'org-bullets-mode))
#+end_src
* json
#+begin_src emacs-lisp
  (use-package json-mode
    :defer 1)
#+end_src
* swiper
#+begin_src emacs-lisp
  (use-package swiper
    :defer 1
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq enable-recursive-minibuffers t)
      (global-set-key "\C-s" 'swiper)
    )
#+end_src
* magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :defer 2
    :bind (("C-x g" . magit-status)))
#+END_SRC
* treemacs
#+begin_src emacs-lisp
  (use-package treemacs
    :ensure t
    :defer t
    :init
    (with-eval-after-load 'winum
      (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    :config
    (progn
      (setq treemacs-collapse-dirs                 (if treemacs-python-executable 3 0)
            treemacs-deferred-git-apply-delay      0.5
            treemacs-directory-name-transformer    #'identity
            treemacs-display-in-side-window        t
            treemacs-eldoc-display                 t
            treemacs-file-event-delay              5000
            treemacs-file-extension-regex          treemacs-last-period-regex-value
            treemacs-file-follow-delay             0.2
            treemacs-file-name-transformer         #'identity
            treemacs-follow-after-init             t
            treemacs-git-command-pipe              ""
            treemacs-goto-tag-strategy             'refetch-index
            treemacs-indentation                   2
            treemacs-indentation-string            " "
            treemacs-is-never-other-window         nil
            treemacs-max-git-entries               5000
            treemacs-missing-project-action        'ask
            treemacs-move-forward-on-expand        nil
            treemacs-no-png-images                 nil
            treemacs-no-delete-other-windows       t
            treemacs-project-follow-cleanup        nil
            treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
            treemacs-position                      'left
            treemacs-recenter-distance             0.1
            treemacs-recenter-after-file-follow    nil
            treemacs-recenter-after-tag-follow     nil
            treemacs-recenter-after-project-jump   'always
            treemacs-recenter-after-project-expand 'on-distance
            treemacs-show-cursor                   nil
            treemacs-show-hidden-files             t
            treemacs-silent-filewatch              nil
            treemacs-silent-refresh                nil
            treemacs-sorting                       'alphabetic-asc
            treemacs-space-between-root-nodes      t
            treemacs-tag-follow-cleanup            t
            treemacs-tag-follow-delay              1.5
            treemacs-user-mode-line-format         nil
            treemacs-user-header-line-format       nil
            treemacs-width                         25
            treemacs-workspace-switch-cleanup      nil)

      ;; The default width and height of the icons is 22 pixels. If you are
      ;; using a Hi-DPI display, uncomment this to double the icon size.
      ;;(treemacs-resize-icons 44)

      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t)
      (treemacs-fringe-indicator-mode t)
      (pcase (cons (not (null (executable-find "git")))
                   (not (null treemacs-python-executable)))
        (`(t . t)
         (treemacs-git-mode 'deferred))
        (`(t . _)
         (treemacs-git-mode 'simple))))
    :bind
    (:map global-map
          ("M-0"       . treemacs-select-window)
          ("<f8>"   . treemacs)
          ("C-x t B"   . treemacs-bookmark)
          ("C-x t C-t" . treemacs-find-file)
          ("C-x t M-t" . treemacs-find-tag)))

  (use-package treemacs-evil
    :after treemacs evil
    :ensure t)

  (use-package treemacs-projectile
    :after treemacs projectile
    :ensure t)

  (use-package treemacs-icons-dired
    :after treemacs dired
    :ensure t
    :config (treemacs-icons-dired-mode))

  (use-package treemacs-magit
    :after treemacs magit
    :ensure t)

  (use-package treemacs-persp ;;treemacs-persective if you use perspective.el vs. persp-mode
    :after treemacs persp-mode ;;or perspective vs. persp-mode
    :ensure t
    :config (treemacs-set-scope-type 'Perspectives))
#+end_src
* protobuf
#+begin_src emacs-lisp
  (use-package protobuf-mode
    :defer 1
    :config
    (defconst my-protobuf-style
      '((c-basic-offset . 2)
        (indent-tabs-mode . nil)))
    (add-hook 'protobuf-mode-hook (lambda () (c-add-style "my-style" my-protobuf-style t))))
#+end_src
* docker
#+begin_src emacs-lisp
  (use-package docker
    :defer 1)
#+end_src
* ini
#+begin_src emacs-lisp
  (use-package ini-mode
    :defer 1)
#+end_src
* Org
#+begin_src emacs-lisp
  (if (string> org-version "9.2")
      (require 'org-tempo))
  ;; (setq org-ditaa-jar-path "~/.emacs.d/jars/ditaa0_9.jar")
  (global-set-key (kbd "<f9>") 'org-agenda)

  (org-babel-do-load-languages
   'org-babel-load-languages
   '(
     (ditaa . t)
     (python . t)
     (C . t)
     (shell . t)
     (emacs-lisp . t)
     )
   )
  (global-set-key (kbd "<f6>") 'org-publish-current-file)
  (add-hook 'org-mode-hook '(lambda () (setq fill-column 120)))
  (add-hook 'org-mode-hook 'auto-fill-mode)
#+end_src
* yasnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :defer 2
    :init
    (setq yas-snippet-dirs
          '("~/.emacs.d/snippets"
            ))
    :config
    (yas-global-mode 1)
    (define-key yas-minor-mode-map [(tab)] nil)
    (define-key yas-minor-mode-map (kbd "TAB") nil)
    (define-key yas-minor-mode-map (kbd "C-c y y") 'yas-expand-from-trigger-key)
    (define-key yas-minor-mode-map (kbd "C-c y n") 'yas-new-snippet))
  (use-package yasnippet-snippets
    :defer 2
    :after yasnippet)
#+END_SRC
* helm
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :defer 2
    :config
    (global-set-key (kbd "M-x") 'helm-M-x)
    ;; (global-set-key (kbd "C-f") 'helm-find-files)
    (global-set-key (kbd "C-f b") 'helm-buffers-list)
    (global-set-key (kbd "C-f s") 'helm-show-kill-ring)
    (global-set-key (kbd "C-f a") 'helm-all-mark-rings)
    )
  (use-package helm-ls-git
    :defer 2
    :after helm)

#+END_SRC
* Company Mode
#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :config
    (global-company-mode t)
    (setq company-idle-delay 0.3)
    (setq company-minimum-prefix-length 2))
  (add-hook 'emacs-lisp-mode-hook
            (lambda ()
              (add-to-list (make-local-variable 'company-backends)
                           '(company-elisp))))
  (use-package company-jedi
    :defer 1
    :config
    (add-hook 'python-mode-hook
              (lambda ()
                (add-to-list (make-local-variable 'company-backends)
                             '(company-jedi))))
    )

  (use-package company-irony
    :defer 1
    :config
    (add-hook 'c-mode-hook
              (lambda ()
                (add-to-list (make-local-variable 'company-backends)
                             '(company-irony)))))

    (use-package company-irony-c-headers
      :defer 1
      :config
      (add-hook 'c-mode-hook
                (lambda ()
                  (add-to-list (make-local-variable 'company-backends)
                               '(company-irony-c-headers)))))
#+end_src
* flycheck
#+begin_src emacs-lisp
  (use-package flycheck-pyflakes
    :config
    (add-hook 'python-mode-hook
              (lambda ()
                (flycheck-mode)
                (define-key python-mode-map (kbd "C-c C-n") 'flycheck-next-error)
                (define-key python-mode-map (kbd "C-c C-p") 'flycheck-previous-error)
                )))
#+end_src
* dashboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*"))))
#+END_SRC
