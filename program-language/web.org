#+begin_src emacs-lisp
  ;; (use-package web-mode
  ;;   :ensure t
  ;;   :mode ("\\.html\\'")
  ;;   :config
  ;;   (setq web-mode-markup-indent-offset 2)
  ;;   (setq web-mode-css-indent-offset 2)
  ;;   (setq web-mode-code-indent-offset 2)
  ;;   (setq web-mode-enable-current-element-highlight t)
  ;;   (setq web-mode-enable-css-colorization t)
  ;;   (use-package company-web
  ;;     :ensure t
  ;;     :config
  ;;     (add-hook 'web-mode-hook (lambda()
  ;;                                (cond ((equal web-mode-content-type "html")
  ;;                                       (my/web-html-setup)))))
  ;;     )
  ;;   )

  ;; (defun my/web-html-setup()
  ;;   "Setup for web-mod html files."
  ;;   (message "web-mode use html related setup")
  ;;   (flycheck-add-mode 'html-tidy 'web-mode)
  ;;   (flycheck-select-checker 'html-tidy)
  ;;   (add-to-list (make-local-variable 'company-backends)
  ;;                `(company-web-html company-files company-css company-capf company-keywords))
  ;;   (add-hook 'before-save-hook 'sgml-pretty-print)
  ;;   )

  ;; (use-package css-mode
  ;;   :ensure t
  ;;   :mode "\\.css\\'"
  ;;   :config
  ;;   (add-hook 'css-mode-hook (lambda()
  ;;                              (add-to-list (make-local-variable 'company-backends)
  ;;                                           '(company-css company-files company-yasnippet company-capf))))

  ;;   (setq css-indent-offset 2)
  ;;   (setq flycheck-stylelintrc "~/.stylelintrc")
  ;;   )

  ;; (use-package scss-mode
  ;;   :ensure t
  ;;   :mode "\\.scss\\'"
  ;;   )

  ;; (use-package emmet-mode
  ;;   :ensure t
  ;;   :hook (web-mode css-mode scss-mode sgml-mode)
  ;;   :config
  ;;   (add-hook 'emmet-mode-hook (lambda ()
  ;;                                (setq emmet-indent-after-insert t)))
  ;;   )
#+end_src

#+RESULTS:
| emmet-mode |
